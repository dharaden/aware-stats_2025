{
  "hash": "7d2d3d613fa967ab70069dedc207ee45",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Week 03: Wrangling, Describing & Visualizing\"\nsubtitle: \"Date: September 8, 2025\"\nfooter:  \"[course-website](https://dharaden.github.io/psyc640/)\"\nlogo: \"images/640_hex.png\"\nformat: \n  revealjs:\n    theme: clean.scss\n    multiplex: false\n    transition: fade\n    slide-number: true\n    incremental: false \n    chalkboard: true\n    overview: false\n    scrollable: true\n    code-line-numbers: true\neditor: visual\nexecute:\n  echo: true\n  freeze: auto\n---\n\n# Today\n\n![](images/clipboard-4156918685.png)\n\n------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# File management\nlibrary(here)\n# for dplyr, ggplot2\nlibrary(tidyverse)\n#Loading data\nlibrary(rio)\n\n#Remove Scientific Notation \noptions(scipen=999)\n```\n:::\n\n\n![](images/tidyprocess.png){fig-align=\"center\"}\n\n------------------------------------------------------------------------\n\n## But first...\n\nWe need to revisit how to read the [ggplot2 cheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization.pdf){target=\"_blank\"}!\n\nA lot of cheatsheets will have something that looks like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc <- ggplot(mpg, aes(hwy))\n\n## Then later on it will say\n\nc + geom_histogram(binwidth = 5)\n```\n\n::: {.cell-output-display}\n![](lec-3_wrangle-viz-describe_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## WHAT IS `c`?!\n\n`c` is just an object that is referring to the first line that we have in a ggplot function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc <- ggplot(mpg, aes(hwy))\n\n## So this...\nc + geom_histogram(binwidth = 5)\n\n## Is the same as this...\nmpg %>% \n  ggplot(aes(hwy)) + \n  geom_histogram(binwidth = 5)\n```\n:::\n\n\n# Back to regular scheduled programming\n\nLet's first start by opening our **`Project`**\n\nThen, create a new Notebook/Markdown Document that we will use for today\n\nSetup the libraries and bring in the data\n\n-   We will use the TIPI data from the last lab\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#import sleep data - Your path may be different\ntipi <- import(here(\"files\", \"data\", \"TIPI_Data.csv\"))\nnames(tipi)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"ID\"                    \"Progress\"              \"Duration (in seconds)\"\n [4] \"Consent\"               \"genderid\"              \"genderid_7_TEXT\"      \n [7] \"sex\"                   \"age\"                   \"year_school\"          \n[10] \"Q85\"                   \"Q85_6_TEXT\"            \"TIPI_1\"               \n[13] \"TIPI_2\"                \"TIPI_3\"                \"TIPI_4\"               \n[16] \"TIPI_5\"                \"TIPI_6\"                \"TIPI_7\"               \n[19] \"TIPI_8\"                \"TIPI_9\"                \"TIPI_10\"              \n[22] \"Sleep Quality\"         \"Hours of Sleep\"       \n```\n\n\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## Naming Conventions\n\nRemember in the lab when things were named all funky? We used the `rename()` function to do that last time. This can be helpful if you want to change it to something specific, but we may just want to make these names a little cleaner.\n\n**Introducing `janitor`** <https://sfirke.github.io/janitor/index.html>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#same code as before\ntipi <- import(here(\"files\", \"data\", \"TIPI_Data.csv\")) %>% \n  # from the janitor package\n  janitor::clean_names()\nnames(tipi)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"id\"                  \"progress\"            \"duration_in_seconds\"\n [4] \"consent\"             \"genderid\"            \"genderid_7_text\"    \n [7] \"sex\"                 \"age\"                 \"year_school\"        \n[10] \"q85\"                 \"q85_6_text\"          \"tipi_1\"             \n[13] \"tipi_2\"              \"tipi_3\"              \"tipi_4\"             \n[16] \"tipi_5\"              \"tipi_6\"              \"tipi_7\"             \n[19] \"tipi_8\"              \"tipi_9\"              \"tipi_10\"            \n[22] \"sleep_quality\"       \"hours_of_sleep\"     \n```\n\n\n:::\n:::\n\n\n# select()\n\n![](images/select().png){fig-align=\"center\"}\n\n------------------------------------------------------------------------\n\n## Using `select()`\n\nYou used this in lab, so you are all experts. Let's review by looking at the [cheatsheet](https://rstudio.github.io/cheatsheets/data-transformation.pdf){target=\"_blank\"} for `dplyr`.\n\nThe `dplyr` package makes data wrangling and transformation much easier. `select()` allows you to...well...select the columns that you want to keep.\n\n-   Use `select()` to remove the following variables: \n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    tipi <- tipi %>% \n      select(-c())\n    ```\n    :::\n\n\n# filter()\n\n![](images/filter().png){fig-align=\"center\"}\n\n------------------------------------------------------------------------\n\n## Extract Rows\n\nThe 'filter()' function is used to subset observations based on their values.\n\nThe result of filtering is a data frame with the same number of columns as before but fewer rows.\n\nThe first argument is data and subsequent arguments are logical expressions that tell you which observations to retain in the data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(starwars, hair_color == \"none\" | eye_color == \"black\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 39 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n 2 Greedo      173    74 <NA>       green      black           44   male  mascu…\n 3 IG-88       200   140 none       metal      red             15   none  mascu…\n 4 Bossk       190   113 none       green      red             53   male  mascu…\n 5 Lobot       175    79 none       light      blue            37   male  mascu…\n 6 Ackbar      180    83 none       brown mot… orange          41   male  mascu…\n 7 Nien Nu…    160    68 none       grey       black           NA   male  mascu…\n 8 Nute Gu…    191    90 none       mottled g… red             NA   male  mascu…\n 9 Jar Jar…    196    66 none       orange     orange          52   male  mascu…\n10 Roos Ta…    224    82 none       grey       orange          NA   male  mascu…\n# ℹ 29 more rows\n# ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n\n\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## Filter Observations\n\nWe can now generate a subset of observations based on a particular value\n\nThere may be some data checks that you perform when wrangling data. One that I would suggest is to look at the overall completion percentages and the amount of time that it took for participants to complete the questionnaire.\n\nThis is exactly what `filter()` is set to do.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assigning it to a new variable\nclean_tipi_data <- tipi %>% \n  filter(progress == 100 & \n         duration_in_seconds > 600)\n\nmax(clean_tipi_data$duration_in_seconds)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 252521\n```\n\n\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## Filter Obs. - Check\n\nGenerating a bar chart to see if it worked out!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_tipi_data %>% \n  ggplot(aes(duration_in_seconds)) + \n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](lec-3_wrangle-viz-describe_files/figure-revealjs/unnamed-chunk-9-1.png){width=960}\n:::\n:::\n\n\n# mutate()\n\n![](/images/mutate().png){fig-align=\"center\"}\n\n------------------------------------------------------------------------\n\n## Compute new variable\n\nWe often need to make a sum/mean score for a variable of interest\n\nThe `mutate()` function is most commonly used to add new columns to your data frame that are functions of existing columns.\n\n`mutate()` requires data as its first argument, followed by a set of expressions defining new columns.\n\n-   **Note**: New variables are automatically added at the end of the data frame (scroll to the right to see them)\n\nFor example, in the `mod_sleep_data`, we have the [Epworth Sleepiness Scale](https://nasemso.org/wp-content/uploads/neuro-epworthsleepscale.pdf){target=\"_blank\"}\n\nTake a look at the scoring of the ESS and compute the total score labelled `ess_total`\n\n------------------------------------------------------------------------\n\n\n\n------------------------------------------------------------------------\n\n## Visualize\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_tipi_data %>% \n  ggplot(aes(genderid)) + \n  geom_bar() + \n  geom_text(stat = \"count\", #Tells it to calculate the statistic\n            aes(label=after_stat(count))) + #Puts label of the count\n  theme_minimal() #or theme_bw\n```\n\n::: {.cell-output-display}\n![](lec-3_wrangle-viz-describe_files/figure-revealjs/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n\n# Your turn!\n\n------------------------------------------------------------------------\n\n## Steps to do if we have time\n\nCreate two new datasets labeled (1) “data_attend” and (2) “data_distract”. In each dataset have those who were paying attention in the “data_attend” and those who were not in the “data_distract”. Paying attention is operationalized as having a score of 5 on the aggregated variable.\n\nGet the sample size of each of these datasets (use Google to search for things like number of rows)\n\nWhat is the mean/average of `ess_total` in each of the samples?\n\n# Next Class\n\nStarting to look at descriptive statistics and how to make these nice tables\n\nWill begin Lab 1 (as long as we have time to do so)\n",
    "supporting": [
      "lec-3_wrangle-viz-describe_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}