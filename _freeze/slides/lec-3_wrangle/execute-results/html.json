{
  "hash": "239b4bea2a8f712f4c1b3abb4e86129d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Week 03: Wrangling\"\nsubtitle: \"Date: September 8, 2025\"\nfooter:  \"[course-website](https://dharaden.github.io/psyc640/)\"\nlogo: \"images/640_hex.png\"\nformat: \n  revealjs:\n    theme: clean.scss\n    multiplex: false\n    transition: fade\n    slide-number: true\n    incremental: false \n    chalkboard: true\n    overview: false\n    scrollable: true\n    code-line-numbers: true\neditor: visual\nexecute:\n  echo: true\n  freeze: auto\n---\n\n# Today\n\n![](images/clipboard-4156918685.png)\n\n# Introduce: Library Tracker\n\nThere are so many things to remember. Let's try to make it easier.\n\n[Group Library Tracker](https://docs.google.com/document/d/1s5HqvebeLKwuXAaudsp_TjzN9_khCPohqXlaYalMMug/edit?usp=sharing){target=\"_blank\"}\n\nUse this page to document the different libraries that we are using in class and for the labs. Share any other libraries that you find a long the way!\n\nRemember, this is for future you! Let's try to be nice to them.\n\n------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# File management\nlibrary(here)\n# for dplyr, ggplot2\nlibrary(tidyverse)\n#Loading data\nlibrary(rio)\n\n#Remove Scientific Notation \noptions(scipen=999)\n```\n:::\n\n\n![](images/tidyprocess.png){fig-align=\"center\"}\n\n# Starting Up\n\nLet's first start by opening our **`Project`**\n\nThen, create a new Notebook/Markdown Document that we will use for today\n\nSetup the libraries and bring in the data\n\n-   We will use the TIPI data from the last lab\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#import sleep data - Your path may be different\ntipi <- import(here(\"files\", \"data\", \"TIPI_Data.csv\"))\nnames(tipi)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"ID\"                    \"Progress\"              \"Duration (in seconds)\"\n [4] \"Consent\"               \"genderid\"              \"genderid_7_TEXT\"      \n [7] \"sex\"                   \"age\"                   \"year_school\"          \n[10] \"Q85\"                   \"Q85_6_TEXT\"            \"TIPI_1\"               \n[13] \"TIPI_2\"                \"TIPI_3\"                \"TIPI_4\"               \n[16] \"TIPI_5\"                \"TIPI_6\"                \"TIPI_7\"               \n[19] \"TIPI_8\"                \"TIPI_9\"                \"TIPI_10\"              \n[22] \"Sleep Quality\"         \"Hours of Sleep\"       \n```\n\n\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## Naming Conventions\n\nRemember in the lab when things were named all funky? We used the `rename()` function to do that last time. This can be helpful if you want to change it to something specific, but we may just want to make these names a little cleaner.\n\n**Introducing `janitor`** <https://sfirke.github.io/janitor/index.html>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#same code as before\ntipi <- import(here(\"files\", \"data\", \"TIPI_Data.csv\")) %>% \n  # from the janitor package\n  janitor::clean_names()\nnames(tipi)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"id\"                  \"progress\"            \"duration_in_seconds\"\n [4] \"consent\"             \"genderid\"            \"genderid_7_text\"    \n [7] \"sex\"                 \"age\"                 \"year_school\"        \n[10] \"q85\"                 \"q85_6_text\"          \"tipi_1\"             \n[13] \"tipi_2\"              \"tipi_3\"              \"tipi_4\"             \n[16] \"tipi_5\"              \"tipi_6\"              \"tipi_7\"             \n[19] \"tipi_8\"              \"tipi_9\"              \"tipi_10\"            \n[22] \"sleep_quality\"       \"hours_of_sleep\"     \n```\n\n\n:::\n:::\n\n\n# select()\n\n![](images/select().png){fig-align=\"center\"}\n\n------------------------------------------------------------------------\n\n## Using `select()`\n\nYou used this in lab, so you are all experts. Let's review by looking at the [cheatsheet](https://rstudio.github.io/cheatsheets/data-transformation.pdf){target=\"_blank\"} for `dplyr`.\n\nThe `dplyr` package makes data wrangling and transformation much easier. `select()` allows you to...well...select the columns that you want to keep.\n\n-   Use `select()` to remove the following variables: \n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    tipi <- tipi %>% \n      select(-c())\n    ```\n    :::\n\n\n# filter()\n\n![](images/filter().png){fig-align=\"center\"}\n\n------------------------------------------------------------------------\n\n## Extract Rows\n\nThe 'filter()' function is used to subset observations based on their values.\n\nThe result of filtering is a data frame with the same number of columns as before but fewer rows.\n\nThe first argument is data and subsequent arguments are logical expressions that tell you which observations to retain in the data frame.\n\n**Note:** You are stating which types of rows you want to keep. If a variable can answer TRUE to your condition, then it will stay in the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(starwars, hair_color == \"none\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 38 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n 2 IG-88       200   140 none       metal      red             15   none  mascu…\n 3 Bossk       190   113 none       green      red             53   male  mascu…\n 4 Lobot       175    79 none       light      blue            37   male  mascu…\n 5 Ackbar      180    83 none       brown mot… orange          41   male  mascu…\n 6 Nien Nu…    160    68 none       grey       black           NA   male  mascu…\n 7 Nute Gu…    191    90 none       mottled g… red             NA   male  mascu…\n 8 Jar Jar…    196    66 none       orange     orange          52   male  mascu…\n 9 Roos Ta…    224    82 none       grey       orange          NA   male  mascu…\n10 Rugor N…    206    NA none       green      orange          NA   male  mascu…\n# ℹ 28 more rows\n# ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n\n\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## Filter Observations\n\nWe can now generate a subset of observations based on a particular value\n\nThere may be some data checks that you perform when wrangling data. One that I would suggest is to look at the overall completion percentages and the amount of time that it took for participants to complete the questionnaire.\n\nThis is exactly what `filter()` is set to do.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assigning it to a new variable\nclean_tipi_data <- tipi %>% \n  filter(progress == 100 & \n         duration_in_seconds > 600)\n```\n:::\n\n\n------------------------------------------------------------------------\n\n# mutate()\n\n![](images/mutate().png){fig-align=\"center\"}\n\n------------------------------------------------------------------------\n\n## Compute new variable\n\nWe often need to make a sum/mean score for a variable of interest, or transform it in some way.\n\nThe `mutate()` function is most commonly used to add new columns to your data frame that are functions of existing columns.\n\n`mutate()` requires data as its first argument, followed by a set of expressions defining new columns.\n\n-   **Note**: New variables are automatically added at the end of the data frame (scroll to the right to see them)\n\nFor example, in the lab, we had the [Ten Item Personality Inventory](https://gosling.psy.utexas.edu/scales-weve-developed/ten-item-personality-measure-tipi/){target=\"_blank\"}\n\nTake a look at the scoring of the TIPI and compute the necessary variables for all subscales\n\n------------------------------------------------------------------------\n\n### Reverse Coding\n\nThere are some items in questionnaire data that are rated in the opposite direction from the other items. These need to be \"reverse coded\" or \"reverse scored\"\n\nThe TIPI documentions highlights certain variables that need this done\n\nWe can take the max value, add 1, then subtract the Item\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoded_tipi_data <- clean_tipi_data %>% \n  mutate(tipi_2r = 8 - tipi_2, \n         tipi_4r = 8 - tipi_4,\n         tipi_6r = 8 - tipi_6,\n         tipi_8r = 8 - tipi_8, \n         tipi_10r = 8 - tipi_10)\n\ncoded_tipi_data %>% select(tipi_2, tipi_2r, tipi_4, tipi_4r) %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  tipi_2 tipi_2r tipi_4 tipi_4r\n1      3       5      3       5\n2      5       3      5       3\n3      3       5      5       3\n4      2       6      7       1\n5      5       3      5       3\n6      6       2      2       6\n```\n\n\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n### Reverse Coding 2.0\n\nWith R, if there is something that is tedious, then that probably means that someone has made a library for it to make it easier.\n\nHere comes `reverse()` from [datawizard](https://easystats.github.io/datawizard/reference/reverse.html?q=revers#null){target=\"_blank\"}\n\n``` r\nreverse(\n  x,\n  select = NULL, #Variables you want reversed\n  exclude = NULL,\n  range = NULL,\n  append = FALSE, #what you want at the end of your new variable\n  ignore_case = FALSE,\n  regex = FALSE,\n  verbose = FALSE,\n  ...\n)\n```\n\n------------------------------------------------------------------------\n\n#### datawizard::reverse()\n\nWe can try out this function with our TIPI data to see if we get something similar to before.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# renaming it something different in case we want to compare\nwizard_tipi_data <- clean_tipi_data %>%\n  datawizard::reverse(\n    select = c(\"tipi_2\", \"tipi_4\", \"tipi_6\", \"tipi_8\", \"tipi_10\"), \n    append = \"r\"\n  )\n\nwizard_tipi_data %>% select(tipi_2, tipi_2r, tipi_4, tipi_4r) %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  tipi_2 tipi_2r tipi_4 tipi_4r\n1      3       5      3       5\n2      5       3      5       3\n3      3       5      5       3\n4      2       6      7       1\n5      5       3      5       3\n6      6       2      2       6\n```\n\n\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## Sum Scores\n\nAnd finally, we can use `mutate()` to create total scores (or really any type of computation)\n\nFor the TIPI data, we need to compute each of the 5 pieces of the Big Five (Extraversion, Agreeableness, Conscientiousness, Emotional Stability and Openness to Experience)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_tipi <- wizard_tipi_data %>% \n  mutate(\n    extra = (tipi_1 + tipi_6r)/2,\n    agree = (tipi_2r + tipi_7)/2,\n    consc = (tipi_3 + tipi_8r)/2,\n    emo = (tipi_4r + tipi_9)/2,\n    open = (tipi_5 + tipi_10r)/2\n  )\n```\n:::\n\n\n# Questions, Comments, Concerns?\n",
    "supporting": [
      "lec-3_wrangle_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}