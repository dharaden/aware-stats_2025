---
title: "Describe & Vizualize"
subtitle: "Date: September 10, 2025"
footer:  "[workshop-website](https://dharaden.github.io/aware-stats_2025/)"
logo: "images/hex.png"
format: 
  revealjs:
    theme: clean.scss
    multiplex: false
    transition: fade
    slide-number: true
    incremental: false 
    chalkboard: true
    overview: false
    scrollable: true
    code-line-numbers: true
editor: visual
execute:
  echo: true
  freeze: auto
---

![](images/ggplot2.png){fig-alt="A fuzzy monster in a beret and scarf, critiquing their own column graph on a canvas in front of them while other assistant monsters (also in berets) carry over boxes full of elements that can be used to customize a graph (like themes and geometric shapes). In the background is a wall with framed data visualizations. Stylized text reads “ggplot2: build a data masterpiece.” Learn more about ggplot2." fig-align="center" width="561"}

------------------------------------------------------------------------

```{r, results = 'hide', message = F, warning = F}
# File management
library(here)
# for dplyr, ggplot2
library(tidyverse)
#Loading data
library(rio)
# for descriptives
library(psych)

#Remove Scientific Notation 
options(scipen=999)
```

![](images/tidyprocess.png){fig-align="center"}

# Starting Up

Let's first start by opening our **`Project`**

Then, create a new Notebook/Markdown Document that we will use for today

Setup the libraries and bring in the data

-   We will use the TIPI data from the last lecture that has already been scored

```{r}
#import data - Your path may be different
tipi <- import(here("files", "data", "final_tipi.csv")) %>% 
  # from the janitor package
  janitor::clean_names()
```

# Summarizing Data

So far we have been calculating various descriptive statistics (somewhat painstakingly) using an assortment of different functions. So what if we have a dataset with a bunch of variables we want descriptive statistics for? Surely we don’t want to calculate descriptives for each variable by hand…

Fortunately for us, there is a function called `describe()` from the `{psych}` package, which we can use to quickly summarize a whole set of variables in a dataset.

Be sure to first install the package prior to putting it into your library code chunk. Reminder: anytime you add a library, be sure you actually run the code line **`library(psych)`**. Otherwise, you will have a hard time trying to use the next functions. 

Let’s use it with our dataset!

## describe()

This function automatically calculates all of the descriptives we reviewed above (and more!). Use the describe() function from the **psych** package on the entire dataset.

**Notes:** If you load a library at the beginning, you can directly call any function from it. Instead, you can call a function by library_name::function_name without loading the entire library.

```{r}
psych::describe(tipi)

# or if you have already loaded the library

describe(tipi)
```

**NOTE**: Some variables are not numeric and are **categorical** variables of type character. By default, the describe() function forces non-numeric variables to be numeric and attempts to calculate descriptives for them. These variables are marked with an asterisk (\*). In this case, it doesn’t make sense to calculate descriptive statistics for these variables, so we get a warning message and a bunch of NaN’s and NA’s for these variables.

A better approach would be to remove non-numeric variables before you attempt to run numerical calculations on your dataset.

------------------------------------------------------------------------

## Make it Pretty

Using `sjPlot` (<https://strengejacke.github.io/sjPlot/index.html>) we can make things a little more publishable! You can use `select()` to also keep particular variables (maybe you don't care about the skew)

```{r}
tipi %>% 
  psych::describe() %>% 
  sjPlot::tab_df()
```

------------------------------------------------------------------------

# `ggplot2`

------------------------------------------------------------------------

## `ggplot2` from the `tidyverse`

Since we have already installed and loaded the library, we don't have to do anything else at this point!

`ggplot2` follows the "grammar of graphics"

-   Theoretical framework for creating data visualizations
-   Breaks the process down into separate components:

::::: columns
::: {.column width="50%"}
Data

Aesthetics (`aes`)

Geometric Objects (`geoms`)
:::

::: {.column width="50%"}
Faceting

Themes
:::
:::::

------------------------------------------------------------------------

## Grammar of Graphics

[![](images/grammargraphics.webp){fig-align="center"}](https://gkesari.medium.com/my-talk-on-grammar-of-graphics-the-secret-sauce-of-powerful-data-stories-3da618cf1bbf)

# `ggplot2` [cheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization.pdf)

------------------------------------------------------------------------

## `ggplot2` syntax {.smaller}

There is a basic structure to create a plot within `ggplot2`, and consists of at least these three things:

1.  A Data Set
2.  Coordinate System
3.  Geoms - visual marks to represent the data points

In R it looks like this:

```{r, eval=FALSE}
ggplot(data = <DATA>) + 
  <GEOM_FUNCTION>(mapping = aes(<MAPPINGS>))

#or how I like to do it
<DATA> %>% 
  ggplot(aes(<MAPPINGS>)) + 
  <GEOM_FUNCTION>()
```

------------------------------------------------------------------------

## `ggplot2` syntax

Let's start with a basic figure with our TIPI data

**First** we will define the data that we are using and the variables we are visualizing

```{r, eval = FALSE}
#the dataset is called penguins

tipi %>% 
  #including the variables we want to visualize
  ggplot(aes(x = emo, 
             y = extra))
```

What happens?

------------------------------------------------------------------------

We forgot to tell it what to do with the data!

![](images/data-aes.png){fig-align="center"}

------------------------------------------------------------------------

Need to add the appropriate `geom` to have it plot points for each observation

```{r, eval = FALSE}
tipi %>% 
  ggplot(aes(x = emo, 
             y = extra)) + 
  geom_point()
```

***\
Note:*** the `geom_point()` layer will "inherit" what is in the `aes()` in the previous layer

------------------------------------------------------------------------

## Adding in Color

Maybe we would like to have each of the points colored by their respective `sex`

This information will be added to the `aes()` within the `geom_point()` layer

```{r, eval = FALSE}
tipi %>% 
  ggplot(aes(x = emo, 
             y = extra)) + 
  geom_point(aes(color=sex))
```

------------------------------------------------------------------------

## Including a fit line

Why don't we put in a line that represents the relationship between these variables?

We will want to add another layer/geom

```{r, eval = FALSE}
tipi %>% 
  ggplot(aes(x = emo, 
             y = extra)) + 
  geom_point(aes(color=sex)) + 
  geom_smooth()
```

\
That looks a little wonky...why is that? Did you get a note in the console?

------------------------------------------------------------------------

## Including a fit line

The `geom_smooth()` defaults to using a loess line to fit to the data

In order to update that, we need to change some of the defaults for that layer and specify that we want a "linear model" or `lm` function to the data

```{r, eval = FALSE}
tipi %>% 
  ggplot(aes(x = emo, 
             y = extra)) + 
  geom_point(aes(color=sex)) + 
  geom_smooth(method = 'lm')
```

\
Did that look a little better?

------------------------------------------------------------------------

## Individual fit lines

It might make more sense to have individual lines for each of the species instead of something that is across all

```{r, eval = FALSE}
tipi %>% 
  ggplot(aes(x = emo, 
             y = extra, 
             color = sex)) + 
  geom_point(aes(color=sex)) + 
  geom_smooth(method = 'lm')
```

\
What did we move around from the last set of code?

What was the error you got?

------------------------------------------------------------------------

## Data Types

It looks like R is looking at our binary variable as a continuous number

We want to be able to tell our code that these are categories/factors

*If we want to change or compute a new variable, what do we use?*

. . .

```{r}
tipi <- tipi %>% 
  mutate(sex = as.factor(sex))
```

------------------------------------------------------------------------

### Let's try that again:

```{r}
tipi %>% 
  ggplot(aes(x = emo, 
             y = extra, 
             color = sex)) + 
  geom_point(aes(color=sex)) + 
  geom_smooth(method = 'lm')
```

------------------------------------------------------------------------

## Updating Labels/Title

It will default to including the variable names as the `x` and `y` labels, but that isn't something that makes sense. Also would be good to have a title!

We add on another layer called `labs()` for our labels ([link](https://ggplot2.tidyverse.org/reference/labs.html))

```{r, eval = FALSE}
tipi %>% 
  ggplot(aes(x = emo, 
             y = extra, 
             color = sex)) + 
  geom_point(aes(color=sex)) + 
  geom_smooth(method = 'lm') + 
  labs(
    title = "TIPI Data",
    subtitle = "Extraversion by Emotional Stability", 
    x = "motional Stability", 
    y = "Extraversion", 
    color = "Sex at Birth"
  )
```

------------------------------------------------------------------------

## Other Graphs

Take another look at the [ggplot cheatsheet](https://rstudio.github.io/cheatsheets/data-visualization.pdf){target="_blank"}

What else is a useful chart?

------------------------------------------------------------------------

### Bar Charts

```{r}
tipi %>% 
  ggplot(aes(x = duration_in_seconds)) + 
  geom_bar()

tipi %>% 
  ggplot(aes(x = age)) + 
  geom_bar(aes(fill = sex), 
                 alpha = 0.5, 
                 position = "identity")
```
