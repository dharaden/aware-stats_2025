---
title: "Week 03: Vizualizing"
subtitle: "Date: September 8, 2025"
footer:  "[course-website](https://dharaden.github.io/psyc640/)"
logo: "images/640_hex.png"
format: 
  revealjs:
    theme: clean.scss
    multiplex: false
    transition: fade
    slide-number: true
    incremental: false 
    chalkboard: true
    overview: false
    scrollable: true
    code-line-numbers: true
editor: visual
execute:
  echo: true
  freeze: auto
---

# Today

![](images/ggplot2.png){fig-alt="A fuzzy monster in a beret and scarf, critiquing their own column graph on a canvas in front of them while other assistant monsters (also in berets) carry over boxes full of elements that can be used to customize a graph (like themes and geometric shapes). In the background is a wall with framed data visualizations. Stylized text reads ‚Äúggplot2: build a data masterpiece.‚Äù Learn more about ggplot2." fig-align="center"}

```{r, results = 'hide', message = F, warning = F}
# File management
library(here)
# for dplyr, ggplot2
library(tidyverse)
#Loading data
library(rio)

#Remove Scientific Notation 
options(scipen=999)
```

![](images/tidyprocess.png){fig-align="center"}

# Starting Up

Let's first start by opening our **`Project`**

Then, create a new Notebook/Markdown Document that we will use for today

Setup the libraries and bring in the data

-   We will use the TIPI data from the last lab

```{r}
#import data - Your path may be different
tipi <- import(here("files", "data", "TIPI_Data.csv")) %>% 
  # from the janitor package
  janitor::clean_names()
```

# `ggplot2`

------------------------------------------------------------------------

## `ggplot2` from the `tidyverse`

Since we have already installed and loaded the library, we don't have to do anything else at this point!

`ggplot2` follows the "grammar of graphics"

-   Theoretical framework for creating data visualizations
-   Breaks the process down into separate components:

::::: columns
::: {.column width="50%"}
Data

Aesthetics (`aes`)

Geometric Objects (`geoms`)
:::

::: {.column width="50%"}
Faceting

Themes
:::
:::::

------------------------------------------------------------------------

## Grammar of Graphics

[![](images/grammargraphics.webp){fig-align="center"}](https://gkesari.medium.com/my-talk-on-grammar-of-graphics-the-secret-sauce-of-powerful-data-stories-3da618cf1bbf)

# `ggplot2` [cheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization.pdf)

------------------------------------------------------------------------

## `ggplot2` syntax {.smaller}

There is a basic structure to create a plot within `ggplot2`, and consists of at least these three things:

1.  A Data Set
2.  Coordinate System
3.  Geoms - visual marks to represent the data points

In R it looks like this:

```{r, eval=FALSE}
ggplot(data = <DATA>) + 
  <GEOM_FUNCTION>(mapping = aes(<MAPPINGS>))

#or how I like to do it
<DATA> %>% 
  ggplot(aes(<MAPPINGS>)) + 
  <GEOM_FUNCTION>()
```

------------------------------------------------------------------------

## `ggplot2` syntax

Let's start with a basic figure with our TIPI data

**First** we will define the data that we are using and the variables we are visualizing

```{r, eval = FALSE}
#the dataset is called penguins

penguins %>% 
  #including the variables we want to visualize
  ggplot(aes(x = flipper_length_mm, 
             y = body_mass_g))
```

What happens?

------------------------------------------------------------------------

We forgot to tell it what to do with the data!

![](/images/data-aes.png){fig-align="center"}

------------------------------------------------------------------------

Need to add the appropriate `geom` to have it plot points for each observation

```{r, eval = FALSE}
penguins %>% 
  ggplot(aes(x = flipper_length_mm, 
             y = body_mass_g)) + 
  geom_point()
```

***\
Note:*** the `geom_point()` layer will inherit what is in the `aes()` in the previous layer

------------------------------------------------------------------------

## Adding in Color

Maybe we would like to have each of the points colored by their respective `species`

This information will be added to the `aes()` within the `geom_point()` layer

```{r, eval = FALSE}
penguins %>% 
  ggplot(aes(x = flipper_length_mm, 
             y = body_mass_g)) + 
  geom_point(aes(color = species))
```

------------------------------------------------------------------------

## Including a fit line

Why don't we put in a line that represents the relationship between these variables?

We will want to add another layer/geom

```{r, eval = FALSE}
penguins %>% 
  ggplot(aes(x = flipper_length_mm, 
             y = body_mass_g)) + 
  geom_point(aes(color = species)) + 
  geom_smooth()
```

\
That looks a little wonky...why is that? Did you get a note in the console?

------------------------------------------------------------------------

## Including a fit line

The `geom_smooth()` defaults to using a loess line to fit to the data

In order to update that, we need to change some of the defaults for that layer and specify that we want a "linear model" or `lm` function to the data

```{r, eval = FALSE}
penguins %>% 
  ggplot(aes(x = flipper_length_mm, 
             y = body_mass_g)) + 
  geom_point(aes(color = species)) + 
  geom_smooth(method = 'lm')
```

\
Did that look a little better?

------------------------------------------------------------------------

## Individual fit lines

It might make more sense to have individual lines for each of the species instead of something that is across all

```{r, eval = FALSE}
penguins %>% 
  ggplot(aes(x = flipper_length_mm, 
             y = body_mass_g, 
             color = species)) + 
  geom_point() + 
  geom_smooth(method = 'lm')
```

\
What did we move around from the last set of code?

------------------------------------------------------------------------

## Updating Labels/Title

It will default to including the variable names as the `x` and `y` labels, but that isn't something that makes sense. Also would be good to have a title!

We add on another layer called `labs()` for our labels ([link](https://ggplot2.tidyverse.org/reference/labs.html))

```{r, eval = FALSE}
penguins %>% 
  ggplot(aes(x = flipper_length_mm, 
             y = body_mass_g, 
             color = species)) + 
  geom_point() + 
  geom_smooth(method = 'lm') + 
  labs(
    title = "Palmer Penguins",
    subtitle = "Body Mass by Flipper Length", 
    x = "Flipper Length (mm)", 
    y = "Body Mass (g)", 
    color = "Species"
  )
```

------------------------------------------------------------------------

## Penguin Histogram

Taken from the website for `palmerpenguins` ([link](https://allisonhorst.github.io/palmerpenguins/articles/intro.html#exploring-distributions))

```{r}
penguins %>% 
  ggplot(aes(x = flipper_length_mm)) +
    geom_histogram(aes(fill = species), 
                   alpha = 0.5, 
                   position = "identity")
```

# Now our own data! üéâ

------------------------------------------------------------------------

## Sleep Data

Let's start by looking at our data. You can either click on the dataset in the `Environment` or use the `View(sleep_data)` command. Here, I am using the `head()` command just to visualize a sample of the data for the slides.

```{r}
head(sleep_data)
```

***What do these variables mean? Who does this?***

------------------------------------------------------------------------

## Data Documentation

It is always important to have appropriate data documentation!

If you can't look at your data and know what it means right away, you aren't going to remember what it means later on.

Sleep Data Documentation - [myCourses](https://mycourses.rit.edu/d2l/le/content/1101433/viewContent/10311985/View){target="_blank"}

------------------------------------------------------------------------

## Visualizing Demographics

"Q5" - *What is your age in years? (open text)*

This is a free text field...is that a good way to get quality data?

Let's see if everyone followed directions. Check the "structure" of the variable

```{r}
# Here we use str() to check structure of a variable
  # Then we state the data and the variable, linked by the $
str(sleep_data$Q5)
```

------------------------------------------------------------------------

## Giving it a try

Use the [ggplot cheatsheet](https://rstudio.github.io/cheatsheets/data-visualization.pdf){target="_blank"} to identify an appropriate way to visualize the data

-   Add some color

-   Update the title and axes

When you are done, [**post your creation here!**](https://docs.google.com/document/d/10fVTcIyTo-TQskKOgvL-BVCiN6vaGb2B96krBDaGQ2g/edit?usp=sharing){target="_blank"}
