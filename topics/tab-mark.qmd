---
title: "Tables & Reporting"
editor: visual
---

# Using the Power of R-Markdown

![](images/clipboard-861228540.png)

We are going to explore some of the useful libraries to report tables in R, and try to capitalize on how R knits information. The goal is to have all analyses and the text in a single document that will update as necessary.

There won't be any slides with this one, we will just work on doing some coding together!

Let's start with a new file and adding in a new dataset. It is good to continuously check to make sure that your code is reproducible by closing your project often or restarting R.

Dark R's <a href="/files/_lab-rmd/dark-rs.Rmd" download="dark-rs.Rmd">Dark Rs (.Rmd)</a>

When starting a file, I like to have all libraries and setup in the initial block. This makes sure that everything is covered and whenever I share this file, those receiving it will be aware of how to get started.

```{r}
library(here) #relative file path
library(rio) #import data
library(easystats) #collection of tools
library(dplyr) #data wrangling
library(ggplot2) #data visualization
library(psych) #cronbach alpha (and a whole lot of other stuff)
library(janitor) #cleaning variable names
library(sjPlot) #making nice tables
library(broom)

#tell R not to display scientific notation
options(scipen=999)

# Create a list of citations of the libraries that are used
report::cite_packages()

# Identify the version of R and the type of machine that is running it
report::report_system()

# Create a list of the package names and the in-text citation 
#report::report_packages()

# Import the data

cah <- import(here("files", "data", "CAH_Data.csv")) %>% 
  clean_names()

tipi <- import(here("files", "data", "final_tipi.csv"))
```

These data are coming from a dataset curated by Cards Against Humanity and their "Pulse of the Nation" survey. You can find more data [here](https://thepulseofthenation.com/#future){target="_blank"}.

## Tables - `sjPlot`

Sometimes there will be a data visualization that is needed or even some tables of descriptives. When generating tables, I tend to prefer to use `sjPlot` (<https://strengejacke.github.io/sjPlot/index.html>)

```{r}
cah %>% 
  describe() %>% 
  tibble::rownames_to_column() %>% 
  select(c(rowname, n, mean, sd)) %>% 
  tab_df(title = "Table 1 - Descriptive Statistics")
```

```{r}
cah %>% 
  select(c(age, income, books, transformers)) %>% 
  tab_corr(title = "Table 2 - Correlations", 
           triangle = "lower", 
           var.labels = c("Age", "Income", "# of books", "# of Transformers Movies"))
```

# Statistical Models

Then the next section will be broken up into my research questions and will have the corresponding modeling. Below are some examples of what that could look like.

We will also explore the

### Linear Regression

```{r}

model1 <- lm(income ~ gender + ghosts + transformers, 
             data = cah)

summary(model1)

tab_model(model1, 
          title = "Table 3 - Predicting Income", 
          dv.labels = "Income")

report(model1)

model1$coefficients[6]

transformers_beta <- broom::tidy(model1) %>% 
  filter(term == "transformers") %>% 
  select(estimate)

```

Sample 1 We ran a linear regression model to predict income and found that the number of transformers movies significantly predicted a lower income (b = `r round(model1$coefficients[6],2)`)

Sample 2 - Broom We ran a linear regression model to predict income and found that the number of transformers movies significantly predicted a lower income (b = `r transformers_beta`)

# Some example code chunks

Cool library to work with missing data! `install.packages('misty')` <https://www.rdocumentation.org/packages/misty/versions/0.7.1>

### Reverse Scoring

```{r}
#https://easystats.github.io/datawizard/reference/reverse.html

## Reverse Scoring

#cleanr <- reverse(data, 
#                  select = c(BFI_6_T1, BFI_21_T1, BFI_31_T1))
```

### Easily identify Duplicates

```{r}
#https://easystats.github.io/datawizard/reference/data_duplicated.html

## Identify Duplicates

#duplicate_raw <- data_duplicated(raw, select = "id")
```

## Generate Cronbach's Alpha

```{r}
## Cronbach's Alpha
#dat %>% 
#  select(BPAQ_1, BPAQ_2, BPAQ_3, BPAQ_4, BPAQ_5) %>% 
#  psych::alpha()
```

# More fun stuff we can explore:

ðŸ”—`rticles` - <https://pkgs.rstudio.com/rticles/>

-   This will provide templates for various journal articles

ðŸ”—`papaja` - <https://github.com/crsh/papaja?tab=readme-ov-file>

-   Another library that generates APA style articles (**P**reparing **APA J**ournal **A**rticles)

-   Also aids in the formatting of the reporting in text
